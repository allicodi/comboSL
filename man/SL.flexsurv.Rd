% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SL.flexsurv.R
\name{SL.flexsurv}
\alias{SL.flexsurv}
\title{Accelerated failure time models}
\usage{
SL.flexsurv(
  Y,
  X,
  newX,
  family,
  obsWeights,
  dist = "gengamma",
  randomUpper = max(Y),
  ...
)
}
\arguments{
\item{Y}{A numeric outcome variable}

\item{X}{A \code{data.frame} of covariates constituting the training sample}

\item{newX}{A \code{data.frame} with the same column names and format as \code{X} constituting
the validation sample.}

\item{family}{Gaussian only}

\item{obsWeights}{Observation-level weights (not currently used)}

\item{dist}{Distribution for accelerated failure time model (defaults to generalized Gamma)}

\item{randomUpper}{If numeric integration fails, for the purposes of stability while fitting
the \code{SuperLearner}, a random number is selected uniformly between 0 and \code{randomUpper}
(defaults to \code{max(Y)}).}
}
\value{
\describe{
 \item{\code{pred}}{Predicted outcomes based on predictors in \code{newX}}
 \item{\code{fit}}{A list with named entries \code{object} (the fitted \code{flexsurv} model object),
                   \code{randomUpper}.}
}
}
\description{
This function implements accelerated failure time regression models to estimate
the conditional survival, which is back-transformed to estimate the conditional mean.
It leverages the \code{flexsurv} package to fit accelerated failure time models and
uses numerical integration to back-transform. The numerical integration step can
be unstable and we have tried to build in checks to guard against this. In particular, we
first try to integrate with upper limit = Inf, but if that fails move to 1e8,
 which sometimes is able to provide a sane answer when upper limit = Inf fails.
The function keeps trying smaller and smaller values, but will not go smaller than 1e6.
In that case it returns a random number between 0 and \code{randomUpper} (default is \code{maxY}).
}
\examples{
# load cost data
data(cost_data)
# fit AFT model
fit_flexsurv <- SL.flexsurv(Y = cost_data$totalcost, X = cost_data[, c("female", "race")],
                              newX = cost_data[, c("female", "race")])
# get back predictions
pred_flexsurv <- predict(fit_flexsurv$fit, newdata = cost_data[,c("female", "race")])
}
